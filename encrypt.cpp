#include<iostream>
#include<conio.h>
#include<string.h>
#include<map>
using namespace std;

string encrypt() {

    string code = "";

    map<char, string> encryptMap = {
        {'`', "1"}, {'~', "10"}, {'!', "11"}, {'@', "100"}, {'#', "101"}, {'$', "110"},
        {'%', "111"}, {'^', "1000"}, {'&', "1001"}, {'*', "1010"}, {'(', "1011"}, {')', "1100"},
        {'_', "1101"}, {'-', "1110"}, {'+', "1111"}, {'=', "10000"}, {'{', "10001"}, {'}', "10010"},
        {'[', "10011"}, {']', "10100"}, {'|', "10101"}, {':', "10110"}, {';', "10111"}, {'"', "11000"},
        {'?', "11001"}, {'<', "11010"}, {'>', "11011"}, {',', "11100"}, {'.', "11101"}, {'/', "11110"},
        {' ', "11111"}, 
        {'Q', "10000010"}, {'q', "100000"},
        {'W', "10000110"}, {'w', "100001"},
        {'E', "10001010"}, {'e', "100010"},
        {'R', "10001110"}, {'r', "100011"},
        {'T', "10010010"}, {'t', "100100"},
        {'Y', "10010110"}, {'y', "100101"},
        {'U', "10011010"}, {'u', "100110"},
        {'I', "10011110"}, {'i', "100111"},
        {'O', "10100010"}, {'o', "101000"},
        {'P', "10100110"}, {'p', "101001"},
        {'A', "10101010"}, {'a', "101010"},
        {'S', "10101110"}, {'s', "101011"},
        {'D', "10110010"}, {'d', "101100"},
        {'F', "10110110"}, {'f', "101101"},
        {'G', "10111010"}, {'g', "101110"},
        {'H', "10111110"}, {'h', "101111"},
        {'J', "11000010"}, {'j', "110000"},
        {'K', "11000110"}, {'k', "110001"},
        {'L', "11001010"}, {'l', "110010"},
        {'Z', "11001110"}, {'z', "110011"},
        {'X', "11010010"}, {'x', "110100"},
        {'C', "11010110"}, {'c', "110101"},
        {'V', "11011010"}, {'v', "110110"},
        {'B', "11011110"}, {'b', "110111"},
        {'N', "11100010"}, {'n', "111000"},
        {'M', "11100110"}, {'m', "111001"},
        {'1', "111010"}, {'2', "111011"}, {'3', "111100"}, {'4', "111101"},
        {'5', "111110"}, {'6', "111111"}, {'7', "1000000"}, {'8', "1000001"}, {'9', "1000010"}, {'0', "1000011"}
    };

    string text;
    cout << "Enter the text to be encrypted: ";
    getline(cin, text);

    char C;

    for(int i = 0; i < text.length(); i++) {
        C = text[i];

        if(encryptMap.find(C) != encryptMap.end()) {
            code += encryptMap[C] + " ";
        }
        else{
            code += "1010 ";
        }
    }

    return code;
}

int main() {
    string codedText = encrypt();
    cout << "Encrypted text: " << codedText << endl;

    getch();
    return 0;
}